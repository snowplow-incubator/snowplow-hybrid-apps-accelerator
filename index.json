[
{
	"uri": "https://snowplow-incubator.github.io/snowplow-hybrid-apps-accelerator/tracking/1-installation/",
	"title": "Installing the trackers",
	"tags": [],
	"description": "",
	"content": "To instrument tracking, you will need to install tracker libraries both in the Web view as well as the native mobile app.\nSnowplow WebView tracker installation To install the WebView tracker in your JavaScript or TypeScript app, add the npm package:\nnpm install --save @snowplow/webview-tracker You will then be able to use the functions provided by the WebView tracker as follows:\nimport { trackSelfDescribingEvent } from \u0026#39;@snowplow/webview-tracker\u0026#39;; There is no need to configure the WebView tracker. All configuration is done in the native layer as explained next.\nSnowplow iOS and Android tracker installation First, you will need to install the Snowplow tracker package in your app. Below, we show how to do so using the Swift Package Manager (SPM) on iOS and Gradle on Android. To learn about other options for installing the trackers (e.g., using CocoaPods or Carthage on iOS), see the mobile tracker documentation.\nYou can install the tracker using SPM as follows:\nIn Xcode, select File \u0026gt; Swift Packages \u0026gt; Add Package Dependency. Add the url where to download the library: https://github.com/snowplow/snowplow-objc-tracker The tracker can be installed using Gradle. Add the following to your build.gradle file:\ndependencies { ... // Snowplow Android Tracker implementation \u0026#39;com.snowplowanalytics:snowplow-android-tracker:3.+\u0026#39; // In case \u0026#39;lifecycleAutotracking\u0026#39; is enabled implementation \u0026#39;androidx.lifecycle-extensions:2.2.+\u0026#39; ... } "
},
{
	"uri": "https://snowplow-incubator.github.io/snowplow-hybrid-apps-accelerator/tracking/",
	"title": "Tracking",
	"tags": [],
	"description": "",
	"content": "Tracking flowchart LR id1(Track)--\u003eid2(Model) style id1 fill:#f9f,stroke:#000,stroke-width:4px Mobile hybrid apps implement some app logic in the platform native code (e.g., in Swift or Java) while some UI is implemented using embedded Web views. Since the two parts are developed using separate code bases, Snowplow events need to be tracked separately.\nThe diagram below shows the interaction between different components in a hybrid app in relation to Snowplow event tracking. Events can be tracked from app logic both inside the Web view as well as the native code. Native code events are tracked using the Snowplow iOS or Android tracker that sends them to the Snowplow Collector. Web view events are tracked using the WebView tracker that passes them to be tracked by the Snowplow iOS or Android tracker.\nflowchart TB subgraph hybridApp[Hybrid Mobile App] subgraph webView[Web View] webViewCode[App logic] webViewTracker[Snowplow WebView tracker] webViewCode -- \"Tracks events\" --\u003e webViewTracker end subgraph nativeCode[Native Code] nativeAppCode[App logic] nativeTracker[Snowplow iOS/Android tracker] nativeAppCode -- \"Tracks events\" --\u003e nativeTracker end webViewTracker -- \"Forwards events\" --\u003e nativeTracker end subgraph cloud[Cloud] collector[Snowplow Collector] end nativeTracker -- \"Sends tracked events\" --\u003e collector This tutorial guides you to instrument Snowplow tracking in both the Web view and native mobile code and track events with consistent session and properties on both sides. It is structured in three parts:\nInstallation of the trackers in your apps. Instrumenting your native iOS or Android app with the mobile trackers and setting up the Web view communication. Tracking events from your Web view with the WebView tracker. "
},
{
	"uri": "https://snowplow-incubator.github.io/snowplow-hybrid-apps-accelerator/tracking/2-mobile_trackers_usage/",
	"title": "Configuring and using the iOS and Android trackers",
	"tags": [],
	"description": "",
	"content": "Having installed the tracker dependencies, the next step is to initialize the tracker instances in your app. Tracker instances are initialized given configuration that includes network settings, tracker feature settings, session settings, and more.\nThe following snippets show how to initialize tracker instances using the default settings. They call the Snowplow.createTracker() function and pass it two required information:\nThe tracker namespace which uniquely identifies the tracker within the app. Network configuration with the endpoint address of the Snowplow Collector (e.g., Snowplow Micro or Snowplow Mini) to send events to. import SnowplowTracker let networkConfig = NetworkConfiguration(endpoint: COLLECTOR_URL, method: .post) let tracker = Snowplow.createTracker( namespace: \u0026#34;appTracker\u0026#34;, network: networkConfig, configurations: [] ); import com.snowplowanalytics.snowplow.Snowplow; import com.snowplowanalytics.snowplow.network.HttpMethod; import com.snowplowanalytics.snowplow.configuration.NetworkConfiguration; NetworkConfiguration networkConfig = new NetworkConfiguration(COLLECTOR_URL, HttpMethod.POST); TrackerController tracker = Snowplow.createTracker(context, \u0026#34;appTracker\u0026#34;, networkConfig ); You can learn more about installing and configuring the mobile trackers in the mobile tracker documentation.\nTracking events in native code The initialized tracker instances can be used to track events in your native code. We won\u0026rsquo;t go into detail on all the tracking features, but only give an example how to track self-describing events. Self-describing events are based around \u0026ldquo;self-describing\u0026rdquo; (self-referential) JSONs, which are a specific kind of JSON schema. A unique schema can be designed for each type of event that you want to track. This allows you to track the specific things that are important to you, in a way that is defined by you.\nA self-describing JSON has two keys, schema and data. The schema value should point to a valid self-describing JSON schema. They are called self-describing because the schema will specify the fields allowed in the data value. Read more about how schemas are used with Snowplow here.\nlet schema = \u0026#34;iglu:com.snowplowanalytics.snowplow/link_click/jsonschema/1-0-1\u0026#34; let data = [\u0026#34;targetUrl\u0026#34;: \u0026#34;http://a-target-url.com\u0026#34;] let event = SelfDescribing(schema: schema, payload: data) tracker.track(event) String schema = \u0026#34;iglu:com.snowplowanalytics.snowplow/link_click/jsonschema/1-0-1\u0026#34;; Map data = new HashMap(); data.put(\u0026#34;targetUrl\u0026#34;, \u0026#34;http://a-target-url.com\u0026#34;); SelfDescribingJson sdj = new SelfDescribingJson(schema, data); SelfDescribing event = new SelfDescribing(sdj); tracker.track(event); Subscribing to events from the Web view In addition to tracking events from the native code, we also want to track events from the Web view. In the following section, we will explain how to instrument your Web application to use the WebView tracker. However, in order for the events from the WebView tracker to arrive at the Snowplow Collector, it is necessary to subscribe the native mobile trackers to listen for messages from the Web view.\nYou can call the Snowplow.subscribeToWebViewEvents(webView) function to subscribe to the messages (same on iOS and Android). The webView object is an instance of WKWebView on iOS and WebView on Android. Please note that the events will only be tracked if you have initialized a tracker instance as described above.\n"
},
{
	"uri": "https://snowplow-incubator.github.io/snowplow-hybrid-apps-accelerator/modeling/",
	"title": "Modeling",
	"tags": [],
	"description": "",
	"content": "Modeling flowchart LR id1(Track)--\u003eid2(Model) style id2 fill:#f9f,stroke:#000,stroke-width:4px We are actively working on this part of the tutorial. Meanwhile, please refer to the mobile data model documentation.\n"
},
{
	"uri": "https://snowplow-incubator.github.io/snowplow-hybrid-apps-accelerator/tracking/3-webview_usage/",
	"title": "Setting up tracking in Web views",
	"tags": [],
	"description": "",
	"content": "In the Installation section, you installed the WebView tracker in your JavaScript Web app that is accessed in the mobile Web views. After that, you learned how to configure and use the mobile trackers to track events and subscribe to events from Web views. This section explains how to use the WebView tracker to track events inside Web views.\nEvent tracking API The tracker provides a set of functions to manually track events. The functions range from single purpose ones, such as trackScreenView, to the more complex but flexible trackSelfDescribingEvent, which can be used to track any kind of user behaviour. We strongly recommend using trackSelfDescribingEvent for your tracking, as it allows you to design custom event types to match your business requirements. This post on our blog, \u0026ldquo;Re-thinking the structure of event data\u0026rdquo; might be informative here.\nYou can import the functions from the @snowplow/webview-tracker package:\nimport { trackSelfDescribingEvent, trackScreenView } from \u0026#39;@snowplow/webview-tracker\u0026#39;; The following functions are available:\nMethod Event type tracked trackSelfDescribingEvent Track a custom event based on \u0026ldquo;self-describing\u0026rdquo; JSON schema trackStructEvent Track a semi-custom structured event trackScreenView Track a view of a screen in the app (to be used with the Snowplow mobile data model) trackPageView Track a Web page visit (to be used with the Snowplow web data model) All the methods share common features and parameters. Every type of event can have an optional context added. See the end of this section to learn about adding context entities to events. It\u0026rsquo;s important to understand how event context works, as it is one of the most powerful Snowplow features. Adding event context entities is a way to add depth, richness and value to all of your events.\nAll of the trackXYZ() methods accept two arguments:\nArgument Description Required? event Event body, depends on the event being tracked Yes trackers Optional list of tracker namespaces to track the event with (undefined for default tracker) No For instance, the following tracks a structured event (explained below) using a tracker initialized with the namespace ns1:\ntrackStructEvent( { category: \u0026#39;shop\u0026#39;, action: \u0026#39;add-to-basket\u0026#39; }, [\u0026#39;ns1\u0026#39;] ); Track self-describing events with trackSelfDescribingEvent Use the trackSelfDescribingEvent function to track a custom event. This is the most advanced and powerful tracking method, which requires a certain amount of planning and infrastructure.\nSelf-describing events are based around \u0026ldquo;self-describing\u0026rdquo; (self-referential) JSONs, which are a specific kind of JSON schema. A unique schema can be designed for each type of event that you want to track. This allows you to track the specific things that are important to you, in a way that is defined by you.\nThis is particularly useful when:\nYou want to track event types which are proprietary/specific to your business You want to track events which have unpredictable or frequently changing properties A self-describing JSON has two keys, schema and data. The schema value should point to a valid self-describing JSON schema. They are called self-describing because the schema will specify the fields allowed in the data value. Read more about how schemas are used with Snowplow here.\nArgument Description Required? event.schema The grouping of structured events which this action belongs to Yes event.data Defines the type of user interaction which this event involves Yes context List of context entities as self-describing JSONs No Example using the default tracker:\ntrackSelfDescribingEvent({ event: { schema: \u0026#39;iglu:com.example_company/save_game/jsonschema/1-0-2\u0026#39;, data: { \u0026#39;saveId\u0026#39;: \u0026#39;4321\u0026#39;, \u0026#39;level\u0026#39;: 23, \u0026#39;difficultyLevel\u0026#39;: \u0026#39;HARD\u0026#39;, \u0026#39;dlContent\u0026#39;: true } } }); Track structured events with Structured This method provides a halfway-house between tracking fully user-defined self-describing events and out-of-the box predefined events. This event type can be used to track many types of user activity, as it is somewhat customizable. \u0026ldquo;Struct\u0026rdquo; events closely mirror the structure of Google Analytics events, with \u0026ldquo;category\u0026rdquo;, \u0026ldquo;action\u0026rdquo;, \u0026ldquo;label\u0026rdquo;, and \u0026ldquo;value\u0026rdquo; properties.\nAs these fields are fairly arbitrary, we recommend following the advice in this table how to define structured events. It\u0026rsquo;s important to be consistent throughout the business about how each field is used.\nArgument Description Required? category The grouping of structured events which this action belongs to Yes action Defines the type of user interaction which this event involves Yes label Often used to refer to the \u0026lsquo;object\u0026rsquo; the action is performed on No property Describing the \u0026lsquo;object\u0026rsquo;, or the action performed on it No value Provides numerical data about the event No context List of context entities as self-describing JSONs No Example:\ntrackStructEvent({ category: \u0026#39;shop\u0026#39;, action: \u0026#39;add-to-basket\u0026#39;, label: \u0026#39;Add To Basket\u0026#39;, property: \u0026#39;pcs\u0026#39;, value: 2.00, }); Track screen views with trackScreenView Use ScreenView to track a user viewing a screen (or similar) within your app. This is the page view equivalent for apps that are not webpages. Screen view events are used in the Snowplow mobile data model.\nThis method creates an unstruct event, by creating and tracking a self-describing event. The schema ID for this is \u0026ldquo;iglu:com.snowplowanalytics.snowplow/screen_view/jsonschema/1-0-0\u0026rdquo;, and the data field will contain the parameters which you provide. That schema is hosted on the schema repository Iglu Central, and so will always be available to your pipeline.\nArgument Description Required? name The human-readable name of the screen viewed. Yes id The id (UUID v4) of screen that was viewed. Yes type The type of screen that was viewed. No previousName The name of the previous screen that was viewed. No previousType The type of screen that was viewed. No previousId The id (UUID v4) of the previous screen that was viewed. No transitionType The type of transition that led to the screen being viewed. No context List of context entities as self-describing JSONs No Example:\ntrackScreenView({ id: \u0026#39;2c295365-eae9-4243-a3ee-5c4b7baccc8f\u0026#39;, name: \u0026#39;home\u0026#39;, type: \u0026#39;full\u0026#39;, transitionType: \u0026#39;none\u0026#39; }); Track Web page views with trackPageView The PageViewEvent may be used to track page views on the Web. The event is designed to track web page views and automatically captures page title, referrer and URL.\nPage view events are the basic building blocks for the Snowplow web data model. For mobile apps we recommend using the mobile data model and tracking screen view events instead.\nArgument Description Required? title Override the page title. No context List of context entities as self-describing JSONs No trackPageView(); Adding data to your events using context entities Event context is an incredibly powerful aspect of Snowplow tracking, which allows you to create very rich data. It is based on the same self-describing JSON schemas as the self-describing events. Using event context, you can add any details you like to your events, as long as you can describe them in a self-describing JSON schema.\nEach schema will describe a single \u0026ldquo;entity\u0026rdquo;. All of an event\u0026rsquo;s entities together form the event context. The event context will be sent as one field of the event, finally ending up in one column (context) in your data storage. There is no limit to how many entities can be attached to one event.\nNote that context can be added to any event type, not just self-describing events. This means that even a simple event type like a page view can hold complex and extensive information – reducing the chances of data loss and the amount of modelling (JOINs etc.) needed in modelling, while increasing the value of each event, and the sophistication of the possible use cases.\nThe entities you provide are validated against their schemas as the event is processed (during the enrich phase). If there is a mistake or mismatch, the event is processed as a Bad Event.\nOnce defined, an entity can be attached to any kind of event. This is also an important point; it means your tracking is as DRY as possible. Using the same \u0026ldquo;user\u0026rdquo; or \u0026ldquo;image\u0026rdquo; or \u0026ldquo;search result\u0026rdquo; (etc.) entities throughout your tracking reduces error, and again makes the data easier to model.\nExample:\ntrackStructEvent( { category: \u0026#39;shop\u0026#39;, action: \u0026#39;add-to-basket\u0026#39;, label: \u0026#39;Add To Basket\u0026#39;, property: \u0026#39;pcs\u0026#39;, value: 2.00, context: [ { schema: \u0026#39;iglu:com.my_company/movie_poster/jsonschema/1-0-0\u0026#39;, data: { movie_name: \u0026#39;Solaris\u0026#39;, poster_country: \u0026#39;JP\u0026#39;, poster_date: \u0026#39;1978-01-01\u0026#39; } }, { schema: \u0026#39;iglu:com.my_company/customer/jsonschema/1-0-0\u0026#39;, data: { p_buy: 0.23, segment: \u0026#39;young_adult\u0026#39; } } ] }, [\u0026#39;ns1\u0026#39;] ); "
},
{
	"uri": "https://snowplow-incubator.github.io/snowplow-hybrid-apps-accelerator/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Snowplow Hybrid Apps Tracking Introduction In this guide you\u0026rsquo;ll learn how to set up tracking as well as how to model and visualise Snowplow data in mobile hybrid apps.\nHybrid apps are mobile apps that in addition to a native interface, provide part of the UI through an embedded Web view. Snowplow events are tracked from both the native code (e.g., written in Swift or Kotlin) as well as the Web view (in JavaScript). Our goal is to have both events tracked from the native code as well as the Web view share the same session and appear as tracked with the same tracker.\nThis accelerator shows how to set up tracking in hybrid apps so that events tracked inside the Web view are passed to the native layer to be tracked by Snowplow mobile trackers. Since all events are tracked by the native mobile trackers, they share the same session and other properties. To achieve this, we make use of both the mobile tracker libraries for iOS and Android as well as the WebView tracker used in JavaScript inside the Web view.\nWe will model the tracked data using the snowplow-mobile dbt package.\nWho is this guide for? Data practicioners who would like to set up tracking in a mobile hybrid app and learn how to use the Snowplow mobile data model to gain insight from their customers\u0026rsquo; behavioural data as quickly as possible.\nWhat you\u0026rsquo;ll learn In less than 2 working days you will learn to:\nTrack - Setup and deploy tracking to mobile hybrid application Model - Configure the snowplow-mobile data model and run it against your Snowflake warehouse gantt dateFormat HH-mm axisFormat %M section 1. Track 10h :track, 00-00, 6m section 2. Model 2h :model, after track, 4m Prerequisites Snowplow Pipeline Hybrid mobile app to implement tracking on dbt installed a new dbt project created and configured a dataset of events from the Snowplow Javascript tracker in your data warehouse (Snowflake will be used for illustration but the package also supports BigQuery, Databricks, Postgres and Redshift) "
},
{
	"uri": "https://snowplow-incubator.github.io/snowplow-hybrid-apps-accelerator/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://snowplow-incubator.github.io/snowplow-hybrid-apps-accelerator/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]